#!/bin/bash
# sunrise-commit - Automates the Gentoo Sunrise Overlay commit process
# Released into the public domain

source /etc/init.d/functions.sh

BLUE=$BRACKET
BOLD=$'\e[0;01m'
DARKGREEN=$'\e[32m'
GREEN=$GOOD
LIGHTBLUE=$HILITE
RED=$BAD
YELLOW=$WARN

commit_path=

current_git_status=( )
cwd_is_ebuild_dir=0
items_added=( )
items_deleted=( )
items_modified=( )
items_not_version_controlled=( )
opt_changelog=0
opt_noformat=0
opt_norepoman=0
opt_local=0
opt_quiet=0
opt_verbose=0

changelog_append() {
	if [[ $opt_changelog == 1 ]] ; then
		get_current_git_status
		if [[ "${current_git_status[*]}" =~ "ChangeLog" ]] ; then
			echo "!!! Error: Only one ChangeLog entry should be made per commit, and you have"
			echo "!!! already modified your ChangeLog locally since your last commit. To keep the"
			echo "!!! pre-existing modifications please run sunrise-commit again without the -c"
			echo "!!! option. To discard the pre-existing modifications run:"
			echo "!!!   git reset HEAD ChangeLog ; git checkout ChangeLog"
			echo "!!!"
			echo -n "!!! "
			echo -n "${BOLD}Are you SURE you want to append to ChangeLog?${NORMAL} [${GREEN}No${NORMAL}/${RED}Yes${NORMAL}] "
	                read choice
	                echo
	                case "$choice" in
				yes|Yes|YES)
					;;

				n*|N*|"")
					echo "Aborting.  Run sunrise-commit without the -c this time around."
					exit 1 ;;

				*)
					echo "Unrecognized response - assuming no."
					echo "Aborting.  Run sunrise-commit without the -c this time around."
					exit 1 ;;
	                esac
		fi
		ebegin "Appending/creating ChangeLog"
		echangelog "$*"
		eend $?
	fi
}

create_digests() {
	if [[ $cwd_is_ebuild_dir == 1 ]] ; then
		ebegin "Digesting ebuilds"
		for i in *.ebuild ; do
			ebuild "$i" manifest
			break
		done
		eend $?
	fi
}

# Sort current changed items into arrays based on symbols in `git status`
# output. For now we're only concerned with the symbols in the first column of
# the output. See `git help status` for symbol definitions.
#
# Returns with exit status 1 if the current dir isn't under version control.
get_current_git_status() {
	local IFS_SAVED="$IFS"
	local item column_1 column_2
	IFS=$'\n'
	current_git_status=( )
	items_added=( )
	items_deleted=( )
	items_modified=( )
	items_not_version_controlled=( )
	items2_deleted=( )
	items2_modified=( )
	for line in $(git status --porcelain -uall 2>&1) ; do
		[[ "$line" =~ "Not a git repository" ]] && return 1
		current_git_status+=( "$line" )
		column_1=${line:0:1}
		column_2=${line:1:1}
		item=${line:3}

		# Use the first item in the commit message
		if [[ -z $commit_path ]]; then
			case "$item" in
				*-*/*/*)
					commit_path=$(awk -F/ '{ print $1 "/" $2 }' <<<"$item") ;;
				*)
					# Not a package; use full path
					commit_path=$item ;;
			esac
		fi

		case $column_1 in
			A)   items_added+=( "$item" ) ;;
			D)   items_deleted+=( "$item" ) ;;
			M)   items_modified+=( "$item" ) ;;
			R)	case $column_2 in
					D)   items2_deleted+=( "$item" ) ;;
					M)   items2_modified+=( "$(echo "${item}" | cut -d ' ' -f3 )" ) ;;
				esac ;;
			"?")   items_not_version_controlled+=( "$item" ) ;;
		esac
		case $column_1 in
			' '|A|D|M)
			case $column_2 in
				D)   items2_deleted+=( "$item" ) ;;
				M)   items2_modified+=( "$item" ) ;;
			esac ;;
		esac
	done
	IFS="$IFS_SAVED"
}

repoman_check() {
	if [[ $opt_norepoman == 0 ]] ; then
		if [[ $cwd_is_ebuild_dir == 1 ]] ; then
			ebegin "Running repoman"
			export PORTDIR_OVERLAY="$(dirname "$(dirname "$(pwd)")")"
			repoman
			eend $?
		fi
	fi
}

git_add() {
	local num_unversioned_dirs=0

	while ! [[ -e .git ]] ; do
		(( num_unversioned_dirs++ ))
		pushd .. >/dev/null 2>&1
		if [[ $? == 1 ]] ; then
			(( num_unversioned_dirs-- ))
			cd .. 2>/dev/null
		fi
	done

	get_current_git_status

	ebegin "Adding local changes to working copy"
	if [[ ${#items_not_version_controlled[*]} > 0 ]] ; then
		if [[ $opt_verbose == 1 ]] ; then
			git add -v -- "${items_not_version_controlled[@]}" || set $?
		else
			git add -- "${items_not_version_controlled[@]}" || set $?
		fi
	fi

	if [[ ${#items2_modified[*]} > 0 ]] ; then
		if [[ $opt_verbose == 1 ]] ; then
			git add -v -- "${items2_modified[@]}" || set $?
		else
			git add -- "${items2_modified[@]}" || set $?
		fi
	fi

	if [[ ${#items2_deleted[*]} > 0 ]] ; then
		git rm -- "${items2_deleted[@]}" || set $?
	fi
	eend ${1:-0}

	for (( i=num_unversioned_dirs ; i > 0 ; i-- )) ; do
		popd >/dev/null
	done

	return ${1:-0}
}

git_commit() {
	local commit_message="$*"

	get_current_git_status
	if [[ ${#current_git_status[*]} == 0 ]] ; then
		echo "!!! Error: No working copy changes found in current directory. Aborting commit."
		exit 1
	fi

	if [[ $opt_noformat == 0 ]] ; then
		commit_message="${commit_path}: ${commit_message}"
	fi

	echo
	echo "${DARKGREEN}The following local changes will be committed to the repository:${NORMAL}"
	echo

	get_current_git_status
	for item in "${current_git_status[@]}" ; do
		echo "$item"
	done

	echo
	echo "${DARKGREEN}The following commit message will be used:${NORMAL}"
	echo
	echo "$commit_message"

	if [[ $opt_quiet == 0 ]] ; then
		echo
		echo -n "${BOLD}Commit changes?${NORMAL} [${GREEN}Yes${NORMAL}/${RED}No${NORMAL}] "
		read choice
		echo

		case "$choice" in
			y*|Y*|"")
				;;

			*)
				echo "Quitting."
				echo
				return 1 ;;
		esac
	fi

	ebegin "Committing working copy to repository"
	git commit -m "$commit_message"
	eend $?
}

git_up() {
	if [[ $opt_local == 0 ]] ; then

		ebegin "Updating working copy to latest version from repository"

		if [[ $opt_verbose == 1 ]] ; then
			git pull --rebase -v origin master || set $?  
		else
			git pull --rebase origin master || set $?
		fi

		eend ${1:-0}

		get_current_git_status
	fi
	return ${1:-0}
}

git_push() {
	if [[ $opt_local == 0 ]] ; then
		ebegin "Pushing commit"

		if [[ $opt_verbose == 1 ]] ; then
			git push -v || set $?
		else
			git push || set $?
		fi
		eend $?
	fi
}

usage() {
cat << EOF
${BOLD}Usage:${NORMAL} ${LIGHTBLUE}sunrise-commit${NORMAL} [ ${GREEN}options${NORMAL} ] ${BLUE}message${NORMAL}

${GREEN}options${NORMAL}:
  ${BOLD}--changelog, -c${NORMAL}  Create a ChangeLog entry using ${BLUE}message${NORMAL}
  ${BOLD}--help, -h${NORMAL}       Show help
  ${BOLD}--noformat, -m${NORMAL}   Disable automatic formatting of ${BLUE}message${NORMAL}
  ${BOLD}--norepoman, -p${NORMAL}  Skip repoman check
  ${BOLD}--local, -l${NORMAL}   Don't pull/push, keep commits local
  ${BOLD}--quiet, -q${NORMAL}      Don't ask for confirmation
  ${BOLD}--verbose, -v${NORMAL}    Show detailed information during commit

${BLUE}message${NORMAL}:
  Commit message describing changes and listing names/emails of anyone (other
  than the commiter) who contributed.
EOF
	exit ${1:-0}
}

[[ -z "$1" ]] && usage 1

while [[ $# > 0 ]] ; do
	case "$1" in
		--changelog|-c)
			if [[ -z "$ECHANGELOG_USER" ]] ; then
				echo "!!! Error: --changelog option requires ECHANGELOG_USER to be set:"
				echo "!!!   export ECHANGELOG_USER=\"Your Name <your@mail.org>\""
				exit 1
			fi
			opt_changelog=1
			shift ;;

		--help|-h)
			usage ;;

		--noformat|-m)
			opt_noformat=1
			shift ;;

		--norepoman|-p)
			opt_norepoman=1
			shift ;;

		--local|-l)
			opt_local=1
			shift ;;

		--quiet|-q)
			opt_quiet=1
			shift ;;

		--verbose|-v)
			opt_verbose=1
			shift ;;

		-*)
   			echo "!!! Error: Unknown option ${1}. See: sunrise-commit -h"
   			exit 1 ;;

		*)
			break ;;
	esac
done

if [[ -z "$*" ]] ; then
	echo "!!! Error: You must supply a commit message. See: sunrise-commit -h"
	exit 1
fi

(shopt -s nullglob; f=(*.ebuild); [[ ${#f[*]} -ne 0 ]] ) && cwd_is_ebuild_dir=1

[[ $cwd_is_ebuild_dir == 1 && ! -e metadata.xml ]] && cp ../../skel.metadata.xml metadata.xml >/dev/null 2>&1

git_add || exit $?
changelog_append "$*" || exit $?
create_digests || exit $?
git_add || exit $?
repoman_check || exit $?
git_commit "$*" || exit $?
git_up || exit $?
git_push || exit $?
